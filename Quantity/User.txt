from django.db import models
from django.contrib.auth.models import PermissionsMixin
from django.contrib.auth.base_user import AbstractBaseUser
from django.contrib.auth.validators import UnicodeUsernameValidator
from account.managers import UserManager
from django.contrib.auth.models import BaseUserManager

# class User(AbstractBaseUser, PermissionsMixin):
#     username = models.CharField(
#         max_length=150,
#         validators=[UnicodeUsernameValidator],
#         unique=True
#     )
#     email = models.EmailField(
#         max_length=150,
#         unique=True,
#         null=True,
#         blank=True
#     )
#     first_name = models.CharField(max_length=30, null=True, blank=True)
#     last_name = models.CharField(max_length=30, null=True, blank=True)
#     is_active = models.BooleanField(default=True)
#     is_staff = models.BooleanField(default=False)
#     is_superuser = models.BooleanField(default=False)
#     date_joined = models.DateTimeField(auto_now_add=True)

#     USERNAME_FIELD = 'username'
#     REQUIRED_FIELDS = []

#     objects = UserManager()

#     def __str__(self):
#         return self.username

from django.core.validators import RegexValidator

phone_validator = RegexValidator(
    r"^(\+?\d{0,4})?\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$",
    "The phone number provided is invalid"
)

class User(AbstractBaseUser, PermissionsMixin):
    phone = models.CharField(max_length=16, validators=[phone_validator], unique=True, null=True, blank=True)
    username = models.CharField(max_length=30, unique=True, validators=[UnicodeUsernameValidator()])
    email = models.EmailField(max_length=150, unique=True, null=True, blank=True)
    is_active = models.BooleanField(default=True)
    is_superuser = models.BooleanField(default=False)
    is_staff = models.BooleanField(default=False)
    date_joined = models.DateTimeField(auto_now_add=True)

    objects = UserManager()

    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = []

    def __str__(self):
        return self.username

# class UserManager(BaseUserManager):
#     def create_user(self, username, email=None, password=None, **extra_fields):
#         if not username:
#             raise ValueError("Username is required")
#         if email:
#             email = self.normalize_email(email)
#         user = self.model(username=username, email=email, **extra_fields)
#         user.set_password(password)
#         user.save(using=self._db)
#         return user

#     def create_superuser(self, username, email=None, password=None, **extra_fields):
	  extra_fields.setdefault('is_active', True)
#         extra_fields.setdefault('is_staff', True)
#         extra_fields.setdefault('is_superuser', True)

#         return self.create_user(username=username, email=email, password=password, **extra_fields)

# class UserManager(BaseUserManager):
#     def create_user(self, phone, username, email=None, password=None, **extra_fields):
#         if not phone:
#             raise ValueError("Phone number is required")
#         if not username:
#             raise ValueError("Username is required")
#         if email:
#             email = self.normalize_email(email)
#         user = self.model(phone=phone, username=username, email=email, **extra_fields)
#         user.set_password(password)
#         user.save(using=self._db)
#         return user

#     def create_superuser(self, phone, username, email=None, password=None, **extra_fields):
#         extra_fields.setdefault('is_staff', True)
#         extra_fields.setdefault('is_superuser', True)

#         return self.create_user(phone=phone, username=username, email=email, password=password, **extra_fields)

class UserManager(BaseUserManager):
    def create_user(self, username, phone=None, email=None, password=None, **extra_fields):
        if not username:
            raise ValueError("Username is required")
        if email:
            email = self.normalize_email(email)
        user = self.model(username=username, phone=phone, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username, phone=None, email=None, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)

        return self.create_user(username=username, phone=phone, email=email, password=password, **extra_fields)
    